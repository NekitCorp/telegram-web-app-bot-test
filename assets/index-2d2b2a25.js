(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))o(a);new MutationObserver(a=>{for(const s of a)if(s.type==="childList")for(const i of s.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&o(i)}).observe(document,{childList:!0,subtree:!0});function n(a){const s={};return a.integrity&&(s.integrity=a.integrity),a.referrerpolicy&&(s.referrerPolicy=a.referrerpolicy),a.crossorigin==="use-credentials"?s.credentials="include":a.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function o(a){if(a.ep)return;a.ep=!0;const s=n(a);fetch(a.href,s)}})();function g(){}function Te(t){return t()}function he(){return Object.create(null)}function X(t){t.forEach(Te)}function We(t){return typeof t=="function"}function z(t,e){return t!=t?e==e:t!==e||t&&typeof t=="object"||typeof t=="function"}function Pe(t){return Object.keys(t).length===0}function p(t,e){t.appendChild(e)}function b(t,e,n){t.insertBefore(e,n||null)}function m(t){t.parentNode&&t.parentNode.removeChild(t)}function te(t,e){for(let n=0;n<t.length;n+=1)t[n]&&t[n].d(e)}function d(t){return document.createElement(t)}function H(t){return document.createTextNode(t)}function _(){return H(" ")}function G(){return H("")}function Ce(t,e,n,o){return t.addEventListener(e,n,o),()=>t.removeEventListener(e,n,o)}function W(t,e,n){n==null?t.removeAttribute(e):t.getAttribute(e)!==n&&t.setAttribute(e,n)}function xe(t){return Array.from(t.childNodes)}function ne(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function Fe(t,e,n,o){n===null?t.style.removeProperty(e):t.style.setProperty(e,n,o?"important":"")}let Y;function J(t){Y=t}function Se(){if(!Y)throw new Error("Function called outside component initialization");return Y}function He(t){Se().$$.on_mount.push(t)}const D=[],pe=[],Z=[],de=[],Ee=Promise.resolve();let ie=!1;function Ne(){ie||(ie=!0,Ee.then(Be))}function le(t){Z.push(t)}const re=new Set;let M=0;function Be(){if(M!==0)return;const t=Y;do{try{for(;M<D.length;){const e=D[M];M++,J(e),je(e.$$)}}catch(e){throw D.length=0,M=0,e}for(J(null),D.length=0,M=0;pe.length;)pe.pop()();for(let e=0;e<Z.length;e+=1){const n=Z[e];re.has(n)||(re.add(n),n())}Z.length=0}while(D.length);for(;de.length;)de.pop()();ie=!1,re.clear(),J(t)}function je(t){if(t.fragment!==null){t.update(),X(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(le)}}const ee=new Set;let j;function oe(){j={r:0,c:[],p:j}}function ae(){j.r||X(j.c),j=j.p}function v(t,e){t&&t.i&&(ee.delete(t),t.i(e))}function y(t,e,n,o){if(t&&t.o){if(ee.has(t))return;ee.add(t),j.c.push(()=>{ee.delete(t),o&&(n&&t.d(1),o())}),t.o(e)}else o&&o()}function Q(t){t&&t.c()}function L(t,e,n,o){const{fragment:a,after_update:s}=t.$$;a&&a.m(e,n),o||le(()=>{const i=t.$$.on_mount.map(Te).filter(We);t.$$.on_destroy?t.$$.on_destroy.push(...i):X(i),t.$$.on_mount=[]}),s.forEach(le)}function O(t,e){const n=t.$$;n.fragment!==null&&(X(n.on_destroy),n.fragment&&n.fragment.d(e),n.on_destroy=n.fragment=null,n.ctx=[])}function Le(t,e){t.$$.dirty[0]===-1&&(D.push(t),Ne(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function q(t,e,n,o,a,s,i,c=[-1]){const l=Y;J(t);const r=t.$$={fragment:null,ctx:[],props:s,update:g,not_equal:a,bound:he(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(l?l.$$.context:[])),callbacks:he(),dirty:c,skip_bound:!1,root:e.target||l.$$.root};i&&i(r.root);let h=!1;if(r.ctx=n?n(t,e.props||{},(u,f,...w)=>{const C=w.length?w[0]:f;return r.ctx&&a(r.ctx[u],r.ctx[u]=C)&&(!r.skip_bound&&r.bound[u]&&r.bound[u](C),h&&Le(t,u)),f}):[],r.update(),h=!0,X(r.before_update),r.fragment=o?o(r.ctx):!1,e.target){if(e.hydrate){const u=xe(e.target);r.fragment&&r.fragment.l(u),u.forEach(m)}else r.fragment&&r.fragment.c();e.intro&&v(t.$$.fragment),L(t,e.target,e.anchor,e.customElement),Be()}J(l)}class K{$destroy(){O(this,1),this.$destroy=g}$on(e,n){if(!We(n))return g;const o=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return o.push(n),()=>{const a=o.indexOf(n);a!==-1&&o.splice(a,1)}}$set(e){this.$$set&&!Pe(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const Oe=[{0:"initData",1:"String",2:'A string with raw data transferred to the Web App, convenient for <a href="https://core.telegram.org/bots/webapps#validating-data-received-via-the-web-app">validating data</a>.<br><strong>WARNING:</strong> <a href="https://core.telegram.org/bots/webapps#validating-data-received-via-the-web-app">Validate data</a> from this field before using it on the bot&#39;s server.'},{0:"initDataUnsafe",1:'<a href="https://core.telegram.org/bots/webapps#webappinitdata">WebAppInitData</a>',2:'An object with input data transferred to the Web App.<br><strong>WARNING:</strong> Data from this field should not be trusted. You should only use data from <em>initData</em> on the bot&#39;s server and only after it has been <a href="https://core.telegram.org/bots/webapps#validating-data-received-via-the-web-app">validated</a>.'},{0:"version",1:"String",2:"The version of the Bot API available in the user&#39;s Telegram app."},{0:"platform <sup><mark>NEW</mark></sup>",1:"String",2:"The name of the platform of the user&#39;s Telegram app."},{0:"colorScheme",1:"String",2:"The color scheme currently used in the Telegram app. Either “light” or “dark”.<br>Also available as the CSS variable <code>var(--tg-color-scheme)</code>."},{0:"themeParams",1:'<a href="https://core.telegram.org/bots/webapps#themeparams">ThemeParams</a>',2:"An object containing the current theme settings used in the Telegram app."},{0:"isExpanded",1:"Boolean",2:"<em>True</em>, if the Web App is expanded to the maximum available height. False, if the Web App occupies part of the screen and can be expanded to the full height using the <strong>expand()</strong> method."},{0:"viewportHeight",1:"Float",2:"The current height of the visible area of the Web App. Also available in CSS as the variable <code>var(--tg-viewport-height)</code>.<br><br>The application can display just the top part of the Web App, with its lower part remaining outside the screen area. From this position, the user can “pull” the Web App to its maximum height, while the bot can do the same by calling the <strong>expand()</strong> method. As the position of the Web App changes, the current height value of the visible area will be updated in real time.<br><br>Please note that the refresh rate of this value is not sufficient to smoothly follow the lower border of the window. It should not be used to pin interface elements to the bottom of the visible area. It&#39;s more appropriate to use the value of the <code>viewportStableHeight</code> field for this purpose."},{0:"viewportStableHeight",1:"Float",2:'The height of the visible area of the Web App in its last stable state. Also available in CSS as a variable <code>var(--tg-viewport-stable-height)</code>.<br><br>The application can display just the top part of the Web App, with its lower part remaining outside the screen area. From this position, the user can “pull” the Web App to its maximum height, while the bot can do the same by calling the <strong>expand()</strong> method. Unlike the value of <code>viewportHeight</code>, the value of <code>viewportStableHeight</code> does not change as the position of the Web App changes with user gestures or during animations. The value of <code>viewportStableHeight</code> will be updated after all gestures and animations are completed and the Web App reaches its final size.<br><br><em>Note the <a href="https://core.telegram.org/bots/webapps#events-available-for-web-apps">event</a> <code>viewportChanged</code> with the passed parameter <code>isStateStable=true</code>, which will allow you to track when the stable state of the height of the visible area changes.</em>'},{0:"headerColor",1:"String",2:"Current header color in the <code>#RRGGBB</code> format."},{0:"backgroundColor",1:"String",2:"Current background color in the <code>#RRGGBB</code> format."},{0:"isClosingConfirmationEnabled",1:"Boolean",2:"<em>True</em>, if the confirmation dialog is enabled while the user is trying to close the Web App. <em>False</em>, if the confirmation dialog is disabled."},{0:"BackButton",1:'<a href="https://core.telegram.org/bots/webapps#backbutton">BackButton</a>',2:"An object for controlling the back button which can be displayed in the header of the Web App in the Telegram interface."},{0:"MainButton",1:'<a href="https://core.telegram.org/bots/webapps#mainbutton">MainButton</a>',2:"An object for controlling the main button, which is displayed at the bottom of the Web App in the Telegram interface."},{0:"HapticFeedback",1:'<a href="https://core.telegram.org/bots/webapps#hapticfeedback">HapticFeedback</a>',2:"An object for controlling haptic feedback."},{0:"isVersionAtLeast(version)",1:"Function",2:"Returns true if the user&#39;s app supports a version of the Bot API that is equal to or higher than the version passed as the parameter."},{0:"setHeaderColor(color)",1:"Function",2:"<mark>Bot API 6.1+</mark> A method that sets the app header color. You can only pass <em>Telegram.WebApp.themeParams.bg_color</em> or <em>Telegram.WebApp.themeParams.secondary_bg_color</em> as a color or you can use keywords <em>bg_color</em>, <em>secondary_bg_color</em> instead."},{0:"setBackgroundColor(color)",1:"Function",2:"<mark>Bot API 6.1+</mark> A method that sets the app background color in the <code>#RRGGBB</code> format or you can use keywords <em>bg_color</em>, <em>secondary_bg_color</em> instead."},{0:"enableClosingConfirmation()",1:"Function",2:"<mark>Bot API 6.2+</mark> A method that enables a confirmation dialog while the user is trying to close the Web App."},{0:"disableClosingConfirmation()",1:"Function",2:"<mark>Bot API 6.2+</mark> A method that disables the confirmation dialog while the user is trying to close the Web App."},{0:"onEvent(eventType, eventHandler)",1:"Function",2:'A method that sets the app event handler. Check <a href="https://core.telegram.org/bots/webapps#events-available-for-web-apps">the list of available events</a>.'},{0:"offEvent(eventType, eventHandler)",1:"Function",2:"A method that deletes a previously set event handler."},{0:"sendData(data)",1:"Function",2:'A method used to send data to the bot. When this method is called, a service message is sent to the bot containing the data <em>data</em> of the length up to 4096 bytes, and the Web App is closed. See the field <em>web_app_data</em> in the class <a href="https://core.telegram.org/bots/api#message">Message</a>.<br><br><em>This method is only available for Web Apps launched via a <a href="https://core.telegram.org/bots/webapps#keyboard-button-web-apps">Keyboard button</a>.</em>'},{0:"openLink(url[, options])",1:"Function",2:'A method that opens a link in an external browser. The Web App will <em>not</em> be closed.<br><mark>Bot API 6.4+</mark> If the optional <em>options</em> parameter is passed with the field <em>try_instant_view=true</em>, the link will be opened in <a href="https://instantview.telegram.org/">Instant View</a> mode if possible.<br><br><em>Note that this method can be called only in response to user interaction with the Web App interface (e.g. a click inside the Web App or on the main button)</em>'},{0:"openTelegramLink(url)",1:"Function",2:"A method that opens a telegram link inside Telegram app. The Web App <em>will</em> be closed."},{0:"openInvoice(url[, callback])",1:"Function",2:'<mark>Bot API 6.1+</mark> A method that opens an invoice using the link <em>url</em>. The Web App will receive the <a href="https://core.telegram.org/bots/webapps#events-available-for-web-apps">event</a> <em>invoiceClosed</em> when the invoice is closed. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the invoice status will be passed as the first argument.'},{0:"showPopup(params[, callback])",1:"Function",2:'<mark>Bot API 6.2+</mark> A method that shows a native popup described by the <em>params</em> argument of the type <a href="https://core.telegram.org/bots/webapps#popupparams">PopupParams</a>. The Web App will receive the <a href="https://core.telegram.org/bots/webapps#events-available-for-web-apps">event</a> <em>popupClosed</em> when the popup is closed. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the field <em>id</em> of the pressed button will be passed as the first argument.'},{0:"showAlert(message[, callback])",1:"Function",2:"<mark>Bot API 6.2+</mark> A method that shows <em>message</em> in a simple alert with a &#39;Close&#39; button. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called when the popup is closed."},{0:"showConfirm(message[, callback])",1:"Function",2:"<mark>Bot API 6.2+</mark> A method that shows <em>message</em> in a simple confirmation window with &#39;OK&#39; and &#39;Cancel&#39; buttons. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called when the popup is closed and the first argument will be a boolean indicating whether the user pressed the &#39;OK&#39; button."},{0:"showScanQrPopup(params[, callback]) <sup><mark>NEW</mark></sup>",1:"Function",2:'<mark>Bot API 6.4+</mark> A method that shows a native popup for scanning a QR code described by the <em>params</em> argument of the type <a href="https://core.telegram.org/bots/webapps#scanqrpopupparams">ScanQrPopupParams</a>. The Web App will receive the <a href="https://core.telegram.org/bots/webapps#events-available-for-web-apps">event</a> <em>qrTextReceived</em> every time the scanner catches a code with text data. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the text from the QR code will be passed as the first argument. Returning <em>true</em> inside this callback function causes the popup to be closed.'},{0:"closeScanQrPopup() <sup><mark>NEW</mark></sup>",1:"Function",2:'<mark>Bot API 6.4+</mark> A method that closes the native popup for scanning a QR code opened with the <em>showScanQrPopup</em> method. Run it if you received valid data in the <a href="https://core.telegram.org/bots/webapps#events-available-for-web-apps">event</a> <em>qrTextReceived</em>.'},{0:"readTextFromClipboard([callback]) <sup><mark>NEW</mark></sup>",1:"Function",2:'<mark>Bot API 6.4+</mark> A method that requests text from the clipboard. The Web App will receive the <a href="https://core.telegram.org/bots/webapps#events-available-for-web-apps">event</a> <em>clipboardTextReceived</em>. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the text from the clipboard will be passed as the first argument.<br><br><em>Note: this method can be called only for Web Apps launched from the attachment menu and only in response to a user interaction with the Web App interface (e.g. a click inside the Web App or on the main button).</em>'},{0:"ready()",1:"Function",2:"A method that informs the Telegram app that the Web App is ready to be displayed.<br>It is recommended to call this method as early as possible, as soon as all essential interface elements are loaded. Once this method is called, the loading placeholder is hidden and the Web App is shown.<br>If the method is not called, the placeholder will be hidden only when the page is fully loaded."},{0:"expand()",1:"Function",2:"A method that expands the Web App to the maximum available height. To find out if the Web App is expanded to the maximum height, refer to the value of the <em>Telegram.WebApp.isExpanded</em> parameter"},{0:"close()",1:"Function",2:"A method that closes the Web App."}],Re=[{0:"<code>themeChanged</code>",1:"Occurs whenever theme settings are changed in the user&#39;s Telegram app (including switching to night mode).<br><em>eventHandler</em> receives no parameters, new theme settings and color scheme can be received via <em>this.themeParams</em> and <em>this.colorScheme</em> respectively."},{0:"<code>viewportChanged</code>",1:"Occurs when the visible section of the Web App is changed.<br><em>eventHandler</em> receives an object with the single field <em>isStateStable</em>. If <em>isStateStable</em> is true, the resizing of the Web App is finished. If it is false, the resizing is ongoing (the user is expanding or collapsing the Web App or an animated object is playing). The current value of the visible section’s height is available in <em>this.viewportHeight</em>."},{0:"<code>mainButtonClicked</code>",1:'Occurs when the <a href="https://core.telegram.org/bots/webapps#mainbutton">main button</a> is pressed.<br><em>eventHandler</em> receives no parameters.'},{0:"<code>backButtonClicked</code>",1:'<mark>Bot API 6.1+</mark> Occurrs when the <a href="https://core.telegram.org/bots/webapps#backbutton">back button</a> is pressed.<br><em>eventHandler</em> receives no parameters.'},{0:"<code>settingsButtonClicked</code>",1:"<mark>Bot API 6.1+</mark> Occurrs when the Settings item in context menu is pressed.<br><em>eventHandler</em> receives no parameters."},{0:"<code>invoiceClosed</code>",1:'<mark>Bot API 6.1+</mark> Occurrs when the opened invoice is closed.<br><em>eventHandler</em> receives an object with the two fields: <em>url</em> – invoice link provided and <em>status</em> – one of the invoice statuses:<br>- <strong>paid</strong> – invoice was paid successfully,<br>- <strong>cancelled</strong> – user closed this invoice without paying,<br>- <strong>failed</strong> – user tried to pay, but the payment was failed,<br>- <strong>pending</strong> – the payment is still processing. The bot will receive a service message about a <a href="https://core.telegram.org/bots/api#successfulpayment">successful payment</a> when the payment is successfully paid.'},{0:"<code>popupClosed</code>",1:"<mark>Bot API 6.2+</mark> Occurrs when the opened popup is closed.<br><em>eventHandler</em> receives an object with the single field <em>button_id</em> – the value of the field <em>id</em> of the pressed button. If no buttons were pressed, the field <em>button_id</em> will be <em>null</em>."},{0:"<code>qrTextReceived</code> <sup><mark>NEW</mark></sup>",1:"<mark>Bot API 6.4+</mark> Occurs when the QR code scanner catches a code with text data.<br><em>eventHandler</em> receives an object with the single field <em>data</em> containing text data from the QR code."},{0:"<code>clipboardTextReceived</code> <sup><mark>NEW</mark></sup>",1:"<mark>Bot API 6.4+</mark> Occurrs when the <code>readTextFromClipboard</code> method is called.<br><em>eventHandler</em> receives an object with the single field <em>data</em> containing text data from the clipboard. If the clipboard contains non-text data, the field <em>data</em> will be an empty string. If the Web App has no access to the clipboard, the field <em>data</em> will be <em>null</em>."}],ue={fieldsData:Oe,eventsData:Re};function Me(t){let e,n,o;return{c(){e=d("pre"),n=d("code"),o=H(t[0]),W(e,"class","svelte-1yitnnt")},m(a,s){b(a,e,s),p(e,n),p(n,o)},p(a,[s]){s&1&&ne(o,a[0])},i:g,o:g,d(a){a&&m(e)}}}function De(t,e,n){let{name:o}=e,a=`Events will be displayed here:
`;return He(()=>{const s=window.Telegram.WebApp.onEvent;typeof s=="function"&&s(o,(...i)=>{n(0,a+=`${JSON.stringify(i)}
`)})}),t.$$set=s=>{"name"in s&&n(1,o=s.name)},[a,o]}class Qe extends K{constructor(e){super(),q(this,e,De,Me,z,{name:1})}}function fe(t,e,n){const o=t.slice();return o[1]=e[n],o}function me(t){let e,n,o,a=t[1][0]+"",s,i,c,l,r,h,u,f,w,C,P,x=t[1][1]+"",V,F,E,S,A,U,T;return A=new Qe({props:{name:be(t[1][0])}}),{c(){e=d("details"),n=d("summary"),o=d("span"),s=_(),i=d("div"),c=_(),l=d("div"),r=d("table"),h=d("colgroup"),h.innerHTML=`<col width="30%"/> 
                    <col width="70%"/>`,u=_(),f=d("tbody"),w=d("tr"),C=d("th"),C.textContent="Description",P=d("td"),V=_(),F=d("tr"),E=d("th"),E.textContent="Playground",S=d("td"),Q(A.$$.fragment),U=_(),W(i,"class","chevron-icon"),W(r,"class","svelte-1y0rnzj"),W(l,"class","content-wrapper svelte-1y0rnzj")},m(k,B){b(k,e,B),p(e,n),p(n,o),o.innerHTML=a,p(n,s),p(n,i),p(e,c),p(e,l),p(l,r),p(r,h),p(r,u),p(r,f),p(f,w),p(w,C),p(w,P),P.innerHTML=x,p(f,V),p(f,F),p(F,E),p(F,S),L(A,S,null),p(e,U),T=!0},p(k,B){(!T||B&1)&&a!==(a=k[1][0]+"")&&(o.innerHTML=a),(!T||B&1)&&x!==(x=k[1][1]+"")&&(P.innerHTML=x);const I={};B&1&&(I.name=be(k[1][0])),A.$set(I)},i(k){T||(v(A.$$.fragment,k),T=!0)},o(k){y(A.$$.fragment,k),T=!1},d(k){k&&m(e),O(A)}}}function ze(t){let e,n,o=t[0],a=[];for(let i=0;i<o.length;i+=1)a[i]=me(fe(t,o,i));const s=i=>y(a[i],1,1,()=>{a[i]=null});return{c(){for(let i=0;i<a.length;i+=1)a[i].c();e=G()},m(i,c){for(let l=0;l<a.length;l+=1)a[l].m(i,c);b(i,e,c),n=!0},p(i,[c]){if(c&1){o=i[0];let l;for(l=0;l<o.length;l+=1){const r=fe(i,o,l);a[l]?(a[l].p(r,c),v(a[l],1)):(a[l]=me(r),a[l].c(),v(a[l],1),a[l].m(e.parentNode,e))}for(oe(),l=o.length;l<a.length;l+=1)s(l);ae()}},i(i){if(!n){for(let c=0;c<o.length;c+=1)v(a[c]);n=!0}},o(i){a=a.filter(Boolean);for(let c=0;c<a.length;c+=1)y(a[c]);n=!1},d(i){te(a,i),i&&m(e)}}}function be(t){return t.match(/<code>(.+)<\/code>/)[1]}function Ge(t,e,n){let{data:o}=e;return t.$$set=a=>{"data"in a&&n(0,o=a.data)},[o]}class qe extends K{constructor(e){super(),q(this,e,Ge,ze,z,{data:0})}}function Ke(t){return t!=null}function ge(t){return(t+"").replace(/[/][/].*$/gm,"").replace(/\s+/g,"").replace(/[/][*][^/*]*[*][/]/g,"").split("){",1)[0].replace(/^[^(]*[(]/,"").replace(/=[^,]+/g,"").split(",").filter(Boolean)}function ve(t,e,n){const o=t.slice();return o[5]=e[n],o[7]=n,o}function _e(t){let e,n=t[5]+"",o,a,s,i,c;return{c(){e=d("label"),o=H(n),a=d("input"),W(a,"type","text"),a.disabled=s=t[5]==="callback",W(e,"class","svelte-b2tya0")},m(l,r){b(l,e,r),p(e,o),p(e,a),i||(c=Ce(a,"input",t[3](t[7])),i=!0)},p(l,r){t=l,r&2&&n!==(n=t[5]+"")&&ne(o,n),r&2&&s!==(s=t[5]==="callback")&&(a.disabled=s)},d(l){l&&m(e),i=!1,c()}}}function Ve(t){let e,n,o,a,s,i,c,l=ge(t[1]),r=[];for(let h=0;h<l.length;h+=1)r[h]=_e(ve(t,l,h));return{c(){e=d("div"),n=d("button"),o=H(t[0]),a=_(),s=d("div");for(let h=0;h<r.length;h+=1)r[h].c();W(s,"class","input-container svelte-b2tya0"),W(e,"class","container svelte-b2tya0")},m(h,u){b(h,e,u),p(e,n),p(n,o),p(e,a),p(e,s);for(let f=0;f<r.length;f+=1)r[f].m(s,null);i||(c=Ce(n,"click",t[4]),i=!0)},p(h,[u]){if(u&1&&ne(o,h[0]),u&10){l=ge(h[1]);let f;for(f=0;f<l.length;f+=1){const w=ve(h,l,f);r[f]?r[f].p(w,u):(r[f]=_e(w),r[f].c(),r[f].m(s,null))}for(;f<r.length;f+=1)r[f].d(1);r.length=l.length}},i:g,o:g,d(h){h&&m(e),te(r,h),i=!1,c()}}}function Ue(t,e,n){let{name:o}=e,{func:a}=e;const s=[];function i(l){return r=>{n(2,s[l]=r.target.value,s)}}const c=()=>a(...s);return t.$$set=l=>{"name"in l&&n(0,o=l.name),"func"in l&&n(1,a=l.func)},[o,a,s,i,c]}class Ie extends K{constructor(e){super(),q(this,e,Ue,Ve,z,{name:0,func:1})}}function we(t,e,n){const o=t.slice();return o[3]=e[n],o}function Je(t){let e,n,o,a;return{c(){e=d("p"),n=H("Value "),o=H(t[0]),a=H(" not found.")},m(s,i){b(s,e,i),p(e,n),p(e,o),p(e,a)},p(s,i){i&1&&ne(o,s[0])},i:g,o:g,d(s){s&&m(e)}}}function Ye(t){let e,n,o,a;const s=[nt,tt,et,Ze,Xe],i=[];function c(l,r){return typeof l[1]=="number"||typeof l[1]=="boolean"?0:typeof l[1]=="string"?1:typeof l[1]=="object"?2:typeof l[1]=="function"?3:4}return e=c(t),n=i[e]=s[e](t),{c(){n.c(),o=G()},m(l,r){i[e].m(l,r),b(l,o,r),a=!0},p(l,r){n.p(l,r)},i(l){a||(v(n),a=!0)},o(l){y(n),a=!1},d(l){i[e].d(l),l&&m(o)}}}function Xe(t){let e;return{c(){e=d("p"),e.textContent=`Unsupported type ${typeof t[1]}.`},m(n,o){b(n,e,o)},p:g,i:g,o:g,d(n){n&&m(e)}}}function Ze(t){let e,n;return e=new Ie({props:{name:t[0],func:t[1]}}),{c(){Q(e.$$.fragment)},m(o,a){L(e,o,a),n=!0},p(o,a){const s={};a&1&&(s.name=o[0]),e.$set(s)},i(o){n||(v(e.$$.fragment,o),n=!0)},o(o){y(e.$$.fragment,o),n=!1},d(o){O(e,o)}}}function et(t){let e,n,o,a,s,i=Object.keys(t[1]).filter(t[2]),c=[];for(let r=0;r<i.length;r+=1)c[r]=ke(we(t,i,r));const l=r=>y(c[r],1,1,()=>{c[r]=null});return{c(){e=d("pre"),n=d("code"),n.textContent=`${JSON.stringify(t[1],null,2)}`,o=_();for(let r=0;r<c.length;r+=1)c[r].c();a=G()},m(r,h){b(r,e,h),p(e,n),b(r,o,h);for(let u=0;u<c.length;u+=1)c[u].m(r,h);b(r,a,h),s=!0},p(r,h){if(h&2){i=Object.keys(r[1]).filter(r[2]);let u;for(u=0;u<i.length;u+=1){const f=we(r,i,u);c[u]?(c[u].p(f,h),v(c[u],1)):(c[u]=ke(f),c[u].c(),v(c[u],1),c[u].m(a.parentNode,a))}for(oe(),u=i.length;u<c.length;u+=1)l(u);ae()}},i(r){if(!s){for(let h=0;h<i.length;h+=1)v(c[h]);s=!0}},o(r){c=c.filter(Boolean);for(let h=0;h<c.length;h+=1)y(c[h]);s=!1},d(r){r&&m(e),r&&m(o),te(c,r),r&&m(a)}}}function tt(t){let e;function n(s,i){return s[1].length>20?at:ot}let a=n(t)(t);return{c(){a.c(),e=G()},m(s,i){a.m(s,i),b(s,e,i)},p(s,i){a.p(s,i)},i:g,o:g,d(s){a.d(s),s&&m(e)}}}function nt(t){let e;return{c(){e=d("code"),e.textContent=`${t[1]}`},m(n,o){b(n,e,o)},p:g,i:g,o:g,d(n){n&&m(e)}}}function ke(t){let e,n;return e=new Ie({props:{name:t[3],func:t[1][t[3]]}}),{c(){Q(e.$$.fragment)},m(o,a){L(e,o,a),n=!0},p:g,i(o){n||(v(e.$$.fragment,o),n=!0)},o(o){y(e.$$.fragment,o),n=!1},d(o){O(e,o)}}}function ot(t){let e;return{c(){e=d("code"),e.textContent=`${t[1]}`},m(n,o){b(n,e,o)},p:g,d(n){n&&m(e)}}}function at(t){let e,n;return{c(){e=d("pre"),n=d("code"),n.textContent=`${t[1]}`},m(o,a){b(o,e,a),p(e,n)},p:g,d(o){o&&m(e)}}}function rt(t){let e,n,o,a,s;const i=[Ye,Je],c=[];function l(r,h){return h&1&&(e=null),e==null&&(e=!!(r[0]&&Ke(r[1]))),e?0:1}return n=l(t,-1),o=c[n]=i[n](t),{c(){o.c(),a=G()},m(r,h){c[n].m(r,h),b(r,a,h),s=!0},p(r,[h]){let u=n;n=l(r,h),n===u?c[n].p(r,h):(oe(),y(c[u],1,1,()=>{c[u]=null}),ae(),o=c[n],o?o.p(r,h):(o=c[n]=i[n](r),o.c()),v(o,1),o.m(a.parentNode,a))},i(r){s||(v(o),s=!0)},o(r){y(o),s=!1},d(r){c[n].d(r),r&&m(a)}}}function it(t,e,n){let{name:o}=e;const a=window.Telegram.WebApp[o],s=i=>typeof a[i]=="function";return t.$$set=i=>{"name"in i&&n(0,o=i.name)},[o,a,s]}class lt extends K{constructor(e){super(),q(this,e,it,rt,z,{name:0})}}function ye(t,e,n){const o=t.slice();return o[1]=e[n],o}function Ae(t){let e,n,o,a=t[1][0]+"",s,i,c,l,r,h,u,f,w,C,P,x=t[1][1]+"",V,F,E,S,A=t[1][2]+"",U,T,k,B,I,se,N;return I=new lt({props:{name:$e(t[1][0])}}),{c(){e=d("details"),n=d("summary"),o=d("span"),s=_(),i=d("div"),c=_(),l=d("div"),r=d("table"),h=d("colgroup"),h.innerHTML=`<col width="30%"/> 
                    <col width="70%"/>`,u=_(),f=d("tbody"),w=d("tr"),C=d("th"),C.textContent="Type",P=d("td"),V=_(),F=d("tr"),E=d("th"),E.textContent="Description",S=d("td"),U=_(),T=d("tr"),k=d("th"),k.textContent="Playground",B=d("td"),Q(I.$$.fragment),se=_(),W(i,"class","chevron-icon"),Fe(B,"width","30%"),W(r,"class","svelte-1y0rnzj"),W(l,"class","content-wrapper svelte-1y0rnzj")},m($,R){b($,e,R),p(e,n),p(n,o),o.innerHTML=a,p(n,s),p(n,i),p(e,c),p(e,l),p(l,r),p(r,h),p(r,u),p(r,f),p(f,w),p(w,C),p(w,P),P.innerHTML=x,p(f,V),p(f,F),p(F,E),p(F,S),S.innerHTML=A,p(f,U),p(f,T),p(T,k),p(T,B),L(I,B,null),p(e,se),N=!0},p($,R){(!N||R&1)&&a!==(a=$[1][0]+"")&&(o.innerHTML=a),(!N||R&1)&&x!==(x=$[1][1]+"")&&(P.innerHTML=x),(!N||R&1)&&A!==(A=$[1][2]+"")&&(S.innerHTML=A);const ce={};R&1&&(ce.name=$e($[1][0])),I.$set(ce)},i($){N||(v(I.$$.fragment,$),N=!0)},o($){y(I.$$.fragment,$),N=!1},d($){$&&m(e),O(I)}}}function st(t){let e,n,o=t[0],a=[];for(let i=0;i<o.length;i+=1)a[i]=Ae(ye(t,o,i));const s=i=>y(a[i],1,1,()=>{a[i]=null});return{c(){for(let i=0;i<a.length;i+=1)a[i].c();e=G()},m(i,c){for(let l=0;l<a.length;l+=1)a[l].m(i,c);b(i,e,c),n=!0},p(i,[c]){if(c&1){o=i[0];let l;for(l=0;l<o.length;l+=1){const r=ye(i,o,l);a[l]?(a[l].p(r,c),v(a[l],1)):(a[l]=Ae(r),a[l].c(),v(a[l],1),a[l].m(e.parentNode,e))}for(oe(),l=o.length;l<a.length;l+=1)s(l);ae()}},i(i){if(!n){for(let c=0;c<o.length;c+=1)v(a[c]);n=!0}},o(i){a=a.filter(Boolean);for(let c=0;c<a.length;c+=1)y(a[c]);n=!1},d(i){te(a,i),i&&m(e)}}}function $e(t){return t=t.split("<")[0],t=t.split("(")[0],t=t.trim(),t}function ct(t,e,n){let{data:o}=e;return t.$$set=a=>{"data"in a&&n(0,o=a.data)},[o]}class ht extends K{constructor(e){super(),q(this,e,ct,st,z,{data:0})}}function pt(t){let e,n,o,a,s,i,c,l;return o=new ht({props:{data:ue.fieldsData}}),c=new qe({props:{data:ue.eventsData}}),{c(){e=d("h3"),e.textContent="Available fields for Web Apps",n=_(),Q(o.$$.fragment),a=_(),s=d("h3"),s.textContent="Events Available for Web Apps",i=_(),Q(c.$$.fragment)},m(r,h){b(r,e,h),b(r,n,h),L(o,r,h),b(r,a,h),b(r,s,h),b(r,i,h),L(c,r,h),l=!0},p:g,i(r){l||(v(o.$$.fragment,r),v(c.$$.fragment,r),l=!0)},o(r){y(o.$$.fragment,r),y(c.$$.fragment,r),l=!1},d(r){r&&m(e),r&&m(n),O(o,r),r&&m(a),r&&m(s),r&&m(i),O(c,r)}}}class dt extends K{constructor(e){super(),q(this,e,null,pt,z,{})}}new dt({target:document.getElementById("app")});
