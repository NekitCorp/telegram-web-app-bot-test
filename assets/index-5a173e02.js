(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))n(o);new MutationObserver(o=>{for(const s of o)if(s.type==="childList")for(const r of s.addedNodes)r.tagName==="LINK"&&r.rel==="modulepreload"&&n(r)}).observe(document,{childList:!0,subtree:!0});function a(o){const s={};return o.integrity&&(s.integrity=o.integrity),o.referrerpolicy&&(s.referrerPolicy=o.referrerpolicy),o.crossorigin==="use-credentials"?s.credentials="include":o.crossorigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(o){if(o.ep)return;o.ep=!0;const s=a(o);fetch(o.href,s)}})();function w(){}function Te(t){return t()}function he(){return Object.create(null)}function Q(t){t.forEach(Te)}function Me(t){return typeof t=="function"}function N(t,e){return t!=t?e==e:t!==e||t&&typeof t=="object"||typeof t=="function"}function Fe(t){return Object.keys(t).length===0}function He(t,...e){if(t==null)return w;const a=t.subscribe(...e);return a.unsubscribe?()=>a.unsubscribe():a}function je(t,e,a){t.$$.on_destroy.push(He(e,a))}function p(t,e){t.appendChild(e)}function g(t,e,a){t.insertBefore(e,a||null)}function b(t){t.parentNode&&t.parentNode.removeChild(t)}function oe(t,e){for(let a=0;a<t.length;a+=1)t[a]&&t[a].d(e)}function d(t){return document.createElement(t)}function B(t){return document.createTextNode(t)}function v(){return B(" ")}function W(){return B("")}function re(t,e,a,n){return t.addEventListener(e,a,n),()=>t.removeEventListener(e,a,n)}function I(t,e,a){a==null?t.removeAttribute(e):t.getAttribute(e)!==a&&t.setAttribute(e,a)}function Re(t){return Array.from(t.childNodes)}function H(t,e){e=""+e,t.wholeText!==e&&(t.data=e)}function me(t,e){t.value=e??""}function Oe(t,e,a,n){a===null?t.style.removeProperty(e):t.style.setProperty(e,a,n?"important":"")}let X;function J(t){X=t}function Ee(){if(!X)throw new Error("Function called outside component initialization");return X}function Le(t){Ee().$$.on_mount.push(t)}const D=[],pe=[],te=[],ue=[],Ne=Promise.resolve();let ie=!1;function qe(){ie||(ie=!0,Ne.then($e))}function se(t){te.push(t)}const ae=new Set;let x=0;function $e(){if(x!==0)return;const t=X;do{try{for(;x<D.length;){const e=D[x];x++,J(e),xe(e.$$)}}catch(e){throw D.length=0,x=0,e}for(J(null),D.length=0,x=0;pe.length;)pe.pop()();for(let e=0;e<te.length;e+=1){const a=te[e];ae.has(a)||(ae.add(a),a())}te.length=0}while(D.length);for(;ue.length;)ue.pop()();ie=!1,ae.clear(),J(t)}function xe(t){if(t.fragment!==null){t.update(),Q(t.before_update);const e=t.dirty;t.dirty=[-1],t.fragment&&t.fragment.p(t.ctx,e),t.after_update.forEach(se)}}const ne=new Set;let O;function Z(){O={r:0,c:[],p:O}}function ee(){O.r||Q(O.c),O=O.p}function _(t,e){t&&t.i&&(ne.delete(t),t.i(e))}function y(t,e,a,n){if(t&&t.o){if(ne.has(t))return;ne.add(t),O.c.push(()=>{ne.delete(t),n&&(a&&t.d(1),n())}),t.o(e)}else n&&n()}function G(t){t&&t.c()}function E(t,e,a,n){const{fragment:o,after_update:s}=t.$$;o&&o.m(e,a),n||se(()=>{const r=t.$$.on_mount.map(Te).filter(Me);t.$$.on_destroy?t.$$.on_destroy.push(...r):Q(r),t.$$.on_mount=[]}),s.forEach(se)}function L(t,e){const a=t.$$;a.fragment!==null&&(Q(a.on_destroy),a.fragment&&a.fragment.d(e),a.on_destroy=a.fragment=null,a.ctx=[])}function ze(t,e){t.$$.dirty[0]===-1&&(D.push(t),qe(),t.$$.dirty.fill(0)),t.$$.dirty[e/31|0]|=1<<e%31}function U(t,e,a,n,o,s,r,c=[-1]){const l=X;J(t);const i=t.$$={fragment:null,ctx:[],props:s,update:w,not_equal:o,bound:he(),on_mount:[],on_destroy:[],on_disconnect:[],before_update:[],after_update:[],context:new Map(e.context||(l?l.$$.context:[])),callbacks:he(),dirty:c,skip_bound:!1,root:e.target||l.$$.root};r&&r(i.root);let h=!1;if(i.ctx=a?a(t,e.props||{},(m,u,...f)=>{const k=f.length?f[0]:u;return i.ctx&&o(i.ctx[m],i.ctx[m]=k)&&(!i.skip_bound&&i.bound[m]&&i.bound[m](k),h&&ze(t,m)),u}):[],i.update(),h=!0,Q(i.before_update),i.fragment=n?n(i.ctx):!1,e.target){if(e.hydrate){const m=Re(e.target);i.fragment&&i.fragment.l(m),m.forEach(b)}else i.fragment&&i.fragment.c();e.intro&&_(t.$$.fragment),E(t,e.target,e.anchor,e.customElement),$e()}J(l)}class V{$destroy(){L(this,1),this.$destroy=w}$on(e,a){if(!Me(a))return w;const n=this.$$.callbacks[e]||(this.$$.callbacks[e]=[]);return n.push(a),()=>{const o=n.indexOf(a);o!==-1&&n.splice(o,1)}}$set(e){this.$$set&&!Fe(e)&&(this.$$.skip_bound=!0,this.$$set(e),this.$$.skip_bound=!1)}}const De=[{0:"initData",1:"String",2:'A string with raw data transferred to the Mini App, convenient for <a href="https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app">validating data</a>.<br><strong>WARNING:</strong> <a href="https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app">Validate data</a> from this field before using it on the bot&#39;s server.'},{0:"initDataUnsafe",1:'<a href="https://core.telegram.org/bots/webapps#webappinitdata">WebAppInitData</a>',2:'An object with input data transferred to the Mini App.<br><strong>WARNING:</strong> Data from this field should not be trusted. You should only use data from <em>initData</em> on the bot&#39;s server and only after it has been <a href="https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app">validated</a>.'},{0:"version",1:"String",2:"The version of the Bot API available in the user&#39;s Telegram app."},{0:"platform",1:"String",2:"The name of the platform of the user&#39;s Telegram app."},{0:"colorScheme",1:"String",2:"The color scheme currently used in the Telegram app. Either “light” or “dark”.<br>Also available as the CSS variable <code>var(--tg-color-scheme)</code>."},{0:"themeParams",1:'<a href="https://core.telegram.org/bots/webapps#themeparams">ThemeParams</a>',2:"An object containing the current theme settings used in the Telegram app."},{0:"isExpanded",1:"Boolean",2:"<em>True</em>, if the Mini App is expanded to the maximum available height. False, if the Mini App occupies part of the screen and can be expanded to the full height using the <strong>expand()</strong> method."},{0:"viewportHeight",1:"Float",2:"The current height of the visible area of the Mini App. Also available in CSS as the variable <code>var(--tg-viewport-height)</code>.<br><br>The application can display just the top part of the Mini App, with its lower part remaining outside the screen area. From this position, the user can “pull” the Mini App to its maximum height, while the bot can do the same by calling the <strong>expand()</strong> method. As the position of the Mini App changes, the current height value of the visible area will be updated in real time.<br><br>Please note that the refresh rate of this value is not sufficient to smoothly follow the lower border of the window. It should not be used to pin interface elements to the bottom of the visible area. It&#39;s more appropriate to use the value of the <code>viewportStableHeight</code> field for this purpose."},{0:"viewportStableHeight",1:"Float",2:'The height of the visible area of the Mini App in its last stable state. Also available in CSS as a variable <code>var(--tg-viewport-stable-height)</code>.<br><br>The application can display just the top part of the Mini App, with its lower part remaining outside the screen area. From this position, the user can “pull” the Mini App to its maximum height, while the bot can do the same by calling the <strong>expand()</strong> method. Unlike the value of <code>viewportHeight</code>, the value of <code>viewportStableHeight</code> does not change as the position of the Mini App changes with user gestures or during animations. The value of <code>viewportStableHeight</code> will be updated after all gestures and animations are completed and the Mini App reaches its final size.<br><br><em>Note the <a href="https://core.telegram.org/bots/webapps#events-available-for-mini-apps">event</a> <code>viewportChanged</code> with the passed parameter <code>isStateStable=true</code>, which will allow you to track when the stable state of the height of the visible area changes.</em>'},{0:"headerColor",1:"String",2:"Current header color in the <code>#RRGGBB</code> format."},{0:"backgroundColor",1:"String",2:"Current background color in the <code>#RRGGBB</code> format."},{0:"bottomBarColor",1:"String",2:"Current bottom bar color in the <code>#RRGGBB</code> format."},{0:"isClosingConfirmationEnabled",1:"Boolean",2:"<em>True</em>, if the confirmation dialog is enabled while the user is trying to close the Mini App. <em>False</em>, if the confirmation dialog is disabled."},{0:"isVerticalSwipesEnabled",1:"Boolean",2:"<em>True</em>, if vertical swipes to close or minimize the Mini App are enabled. <em>False</em>, if vertical swipes to close or minimize the Mini App are disabled. In any case, the user will still be able to minimize and close the Mini App by swiping the Mini App&#39;s header."},{0:"BackButton",1:'<a href="https://core.telegram.org/bots/webapps#backbutton">BackButton</a>',2:"An object for controlling the back button which can be displayed in the header of the Mini App in the Telegram interface."},{0:"MainButton",1:'<a href="https://core.telegram.org/bots/webapps#bottombutton">BottomButton</a>',2:"An object for controlling the main button, which is displayed at the bottom of the Mini App in the Telegram interface."},{0:"SecondaryButton",1:'<a href="https://core.telegram.org/bots/webapps#bottombutton">BottomButton</a>',2:"An object for controlling the secondary button, which is displayed at the bottom of the Mini App in the Telegram interface."},{0:"SettingsButton",1:'<a href="https://core.telegram.org/bots/webapps#settingsbutton">SettingsButton</a>',2:"An object for controlling the Settings item in the context menu of the Mini App in the Telegram interface."},{0:"HapticFeedback",1:'<a href="https://core.telegram.org/bots/webapps#hapticfeedback">HapticFeedback</a>',2:"An object for controlling haptic feedback."},{0:"CloudStorage",1:'<a href="https://core.telegram.org/bots/webapps#cloudstorage">CloudStorage</a>',2:"An object for controlling cloud storage."},{0:"BiometricManager",1:'<a href="https://core.telegram.org/bots/webapps#biometricmanager">BiometricManager</a>',2:"An object for controlling biometrics on the device."},{0:"isVersionAtLeast(version)",1:"Function",2:"Returns true if the user&#39;s app supports a version of the Bot API that is equal to or higher than the version passed as the parameter."},{0:"setHeaderColor(color)",1:"Function",2:"<mark>Bot API 6.1+</mark> A method that sets the app header color in the <code>#RRGGBB</code> format. You can also use keywords <em>bg_color</em> and <em>secondary_bg_color</em>.<br><br>Up to <mark>Bot API 6.9</mark> You can only pass <em>Telegram.WebApp.themeParams.bg_color</em> or <em>Telegram.WebApp.themeParams.secondary_bg_color</em> as a color or <em>bg_color</em>, <em>secondary_bg_color</em> keywords."},{0:"setBackgroundColor(color)",1:"Function",2:"<mark>Bot API 6.1+</mark> A method that sets the app background color in the <code>#RRGGBB</code> format. You can also use keywords <em>bg_color</em> and <em>secondary_bg_color</em>."},{0:"setBottomBarColor(color)",1:"Function",2:"<mark>Bot API 7.10+</mark> A method that sets the app&#39;s bottom bar color in the <code>#RRGGBB</code> format. You can also use the keywords <em>bg_color</em>, <em>secondary_bg_color</em> and <em>bottom_bar_bg_color</em>."},{0:"enableClosingConfirmation()",1:"Function",2:"<mark>Bot API 6.2+</mark> A method that enables a confirmation dialog while the user is trying to close the Mini App."},{0:"disableClosingConfirmation()",1:"Function",2:"<mark>Bot API 6.2+</mark> A method that disables the confirmation dialog while the user is trying to close the Mini App."},{0:"enableVerticalSwipes()",1:"Function",2:"<mark>Bot API 7.7+</mark> A method that enables vertical swipes to close or minimize the Mini App. For user convenience, it is recommended to always enable swipes unless they conflict with the Mini App&#39;s own gestures."},{0:"disableVerticalSwipes()",1:"Function",2:"<mark>Bot API 7.7+</mark> A method that disables vertical swipes to close or minimize the Mini App. This method is useful if your Mini App uses swipe gestures that may conflict with the gestures for minimizing and closing the app."},{0:"onEvent(eventType, eventHandler)",1:"Function",2:'A method that sets the app event handler. Check <a href="https://core.telegram.org/bots/webapps#events-available-for-mini-apps">the list of available events</a>.'},{0:"offEvent(eventType, eventHandler)",1:"Function",2:"A method that deletes a previously set event handler."},{0:"sendData(data)",1:"Function",2:'A method used to send data to the bot. When this method is called, a service message is sent to the bot containing the data <em>data</em> of the length up to 4096 bytes, and the Mini App is closed. See the field <em>web_app_data</em> in the class <a href="https://core.telegram.org/bots/api#message">Message</a>.<br><br><em>This method is only available for Mini Apps launched via a <a href="https://core.telegram.org/bots/webapps#keyboard-button-mini-apps">Keyboard button</a>.</em>'},{0:"switchInlineQuery(query[, choose_chat_types])",1:"Function",2:"<mark>Bot API 6.7+</mark> A method that inserts the bot&#39;s username and the specified inline <em>query</em> in the current chat&#39;s input field. Query may be empty, in which case only the bot&#39;s username will be inserted. If an optional <em>choose_chat_types</em> parameter was passed, the client prompts the user to choose a specific chat, then opens that chat and inserts the bot&#39;s username and the specified inline query in the input field. You can specify which types of chats the user will be able to choose from. It can be one or more of the following types: <em>users</em>, <em>bots</em>, <em>groups</em>, <em>channels</em>."},{0:"openLink(url[, options])",1:"Function",2:'A method that opens a link in an external browser. The Mini App will <em>not</em> be closed.<br><mark>Bot API 6.4+</mark> If the optional <em>options</em> parameter is passed with the field <em>try_instant_view=true</em>, the link will be opened in <a href="https://instantview.telegram.org/">Instant View</a> mode if possible.<br><br><em>Note that this method can be called only in response to user interaction with the Mini App interface (e.g. a click inside the Mini App or on the main button)</em>'},{0:"openTelegramLink(url)",1:"Function",2:"A method that opens a telegram link inside the Telegram app. The Mini App will <em>not</em> be closed after this method is called.<br><br>Up to <mark>Bot API 7.0</mark> The Mini App <em>will</em> be closed after this method is called."},{0:"openInvoice(url[, callback])",1:"Function",2:'<mark>Bot API 6.1+</mark> A method that opens an invoice using the link <em>url</em>. The Mini App will receive the <a href="https://core.telegram.org/bots/webapps#events-available-for-mini-apps">event</a> <em>invoiceClosed</em> when the invoice is closed. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the invoice status will be passed as the first argument.'},{0:"shareToStory(media_url[, params])",1:"Function",2:'<mark>Bot API 7.8+</mark> A method that opens the native story editor with the media specified in the <em>media_url</em> parameter as an HTTPS URL. An optional <em>params</em> argument of the type <a href="https://core.telegram.org/bots/webapps#storyshareparams">StoryShareParams</a> describes additional sharing settings.'},{0:"showPopup(params[, callback])",1:"Function",2:'<mark>Bot API 6.2+</mark> A method that shows a native popup described by the <em>params</em> argument of the type <a href="https://core.telegram.org/bots/webapps#popupparams">PopupParams</a>. The Mini App will receive the <a href="https://core.telegram.org/bots/webapps#events-available-for-mini-apps">event</a> <em>popupClosed</em> when the popup is closed. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the field <em>id</em> of the pressed button will be passed as the first argument.'},{0:"showAlert(message[, callback])",1:"Function",2:"<mark>Bot API 6.2+</mark> A method that shows <em>message</em> in a simple alert with a &#39;Close&#39; button. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called when the popup is closed."},{0:"showConfirm(message[, callback])",1:"Function",2:"<mark>Bot API 6.2+</mark> A method that shows <em>message</em> in a simple confirmation window with &#39;OK&#39; and &#39;Cancel&#39; buttons. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called when the popup is closed and the first argument will be a boolean indicating whether the user pressed the &#39;OK&#39; button."},{0:"showScanQrPopup(params[, callback])",1:"Function",2:'<mark>Bot API 6.4+</mark> A method that shows a native popup for scanning a QR code described by the <em>params</em> argument of the type <a href="https://core.telegram.org/bots/webapps#scanqrpopupparams">ScanQrPopupParams</a>. The Mini App will receive the <a href="https://core.telegram.org/bots/webapps#events-available-for-mini-apps">event</a> <em>qrTextReceived</em> every time the scanner catches a code with text data. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the text from the QR code will be passed as the first argument. Returning <em>true</em> inside this callback function causes the popup to be closed. Starting from <mark>Bot API 7.7</mark>, the Mini App will receive the <em>scanQrPopupClosed</em> event if the user closes the native popup for scanning a QR code.'},{0:"closeScanQrPopup()",1:"Function",2:'<mark>Bot API 6.4+</mark> A method that closes the native popup for scanning a QR code opened with the <em>showScanQrPopup</em> method. Run it if you received valid data in the <a href="https://core.telegram.org/bots/webapps#events-available-for-mini-apps">event</a> <em>qrTextReceived</em>.'},{0:"readTextFromClipboard([callback])",1:"Function",2:'<mark>Bot API 6.4+</mark> A method that requests text from the clipboard. The Mini App will receive the <a href="https://core.telegram.org/bots/webapps#events-available-for-mini-apps">event</a> <em>clipboardTextReceived</em>. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called and the text from the clipboard will be passed as the first argument.<br><br><em>Note: this method can be called only for Mini Apps launched from the attachment menu and only in response to a user interaction with the Mini App interface (e.g. a click inside the Mini App or on the main button).</em>'},{0:"requestWriteAccess([callback])",1:"Function",2:"<mark>Bot API 6.9+</mark> A method that shows a native popup requesting permission for the bot to send messages to the user. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called when the popup is closed and the first argument will be a boolean indicating whether the user granted this access."},{0:"requestContact([callback])",1:"Function",2:"<mark>Bot API 6.9+</mark> A method that shows a native popup prompting the user for their phone number. If an optional <em>callback</em> parameter was passed, the <em>callback</em> function will be called when the popup is closed and the first argument will be a boolean indicating whether the user shared its phone number."},{0:"ready()",1:"Function",2:"A method that informs the Telegram app that the Mini App is ready to be displayed.<br>It is recommended to call this method as early as possible, as soon as all essential interface elements are loaded. Once this method is called, the loading placeholder is hidden and the Mini App is shown.<br>If the method is not called, the placeholder will be hidden only when the page is fully loaded."},{0:"expand()",1:"Function",2:"A method that expands the Mini App to the maximum available height. To find out if the Mini App is expanded to the maximum height, refer to the value of the <em>Telegram.WebApp.isExpanded</em> parameter"},{0:"close()",1:"Function",2:"A method that closes the Mini App."}],Ge=[{0:"<code>themeChanged</code>",1:"Occurs whenever theme settings are changed in the user&#39;s Telegram app (including switching to night mode).<br><em>eventHandler</em> receives no parameters, new theme settings and color scheme can be received via <em>this.themeParams</em> and <em>this.colorScheme</em> respectively."},{0:"<code>viewportChanged</code>",1:"Occurs when the visible section of the Mini App is changed.<br><em>eventHandler</em> receives an object with the single field <em>isStateStable</em>. If <em>isStateStable</em> is true, the resizing of the Mini App is finished. If it is false, the resizing is ongoing (the user is expanding or collapsing the Mini App or an animated object is playing). The current value of the visible section’s height is available in <em>this.viewportHeight</em>."},{0:"<code>mainButtonClicked</code>",1:'Occurs when the <a href="https://core.telegram.org/bots/webapps#bottombutton">main button</a> is pressed.<br><em>eventHandler</em> receives no parameters.'},{0:"<code>secondaryButtonClicked</code>",1:'<mark>Bot API 7.10+</mark> Occurs when the <a href="https://core.telegram.org/bots/webapps#bottombutton">secondary button</a> is pressed.<br><em>eventHandler</em> receives no parameters.'},{0:"<code>backButtonClicked</code>",1:'<mark>Bot API 6.1+</mark> Occurrs when the <a href="https://core.telegram.org/bots/webapps#backbutton">back button</a> is pressed.<br><em>eventHandler</em> receives no parameters.'},{0:"<code>settingsButtonClicked</code>",1:"<mark>Bot API 6.1+</mark> Occurrs when the Settings item in context menu is pressed.<br><em>eventHandler</em> receives no parameters."},{0:"<code>invoiceClosed</code>",1:'<mark>Bot API 6.1+</mark> Occurrs when the opened invoice is closed.<br><em>eventHandler</em> receives an object with the two fields: <em>url</em> – invoice link provided and <em>status</em> – one of the invoice statuses:<br>- <strong>paid</strong> – invoice was paid successfully,<br>- <strong>cancelled</strong> – user closed this invoice without paying,<br>- <strong>failed</strong> – user tried to pay, but the payment was failed,<br>- <strong>pending</strong> – the payment is still processing. The bot will receive a service message about a <a href="https://core.telegram.org/bots/api#successfulpayment">successful payment</a> when the payment is successfully paid.'},{0:"<code>popupClosed</code>",1:"<mark>Bot API 6.2+</mark> Occurrs when the opened popup is closed.<br><em>eventHandler</em> receives an object with the single field <em>button_id</em> – the value of the field <em>id</em> of the pressed button. If no buttons were pressed, the field <em>button_id</em> will be <em>null</em>."},{0:"<code>qrTextReceived</code>",1:"<mark>Bot API 6.4+</mark> Occurs when the QR code scanner catches a code with text data.<br><em>eventHandler</em> receives an object with the single field <em>data</em> containing text data from the QR code."},{0:"<code>scanQrPopupClosed</code>",1:"<mark>Bot API 7.7+</mark> Occurs when the QR code scanner popup is closed by the user.<br><em>eventHandler</em> receives no parameters."},{0:"<code>clipboardTextReceived</code>",1:"<mark>Bot API 6.4+</mark> Occurrs when the <code>readTextFromClipboard</code> method is called.<br><em>eventHandler</em> receives an object with the single field <em>data</em> containing text data from the clipboard. If the clipboard contains non-text data, the field <em>data</em> will be an empty string. If the Mini App has no access to the clipboard, the field <em>data</em> will be <em>null</em>."},{0:"<code>writeAccessRequested</code>",1:"<mark>Bot API 6.9+</mark> Occurs when the write permission was requested.<br><em>eventHandler</em> receives an object with the single field <em>status</em> containing one of the statuses:<br>- <strong>allowed</strong> – user granted write permission to the bot,<br>- <strong>cancelled</strong> – user declined this request."},{0:"<code>contactRequested</code>",1:"<mark>Bot API 6.9+</mark> Occurrs when the user&#39;s phone number was requested.<br><em>eventHandler</em> receives an object with the single field <em>status</em> containing one of the statuses:<br>- <strong>sent</strong> – user shared their phone number with the bot,<br>- <strong>cancelled</strong> – user declined this request."},{0:"<code>biometricManagerUpdated</code>",1:"<mark>Bot API 7.2+</mark> Occurs whenever BiometricManager object is changed.<br><em>eventHandler</em> receives no parameters."},{0:"<code>biometricAuthRequested</code>",1:"<mark>Bot API 7.2+</mark> Occurs whenever biometric authentication was requested.<br><em>eventHandler</em> receives an object with the field <em>isAuthenticated</em> containing a boolean indicating whether the user was authenticated successfully. If <em>isAuthenticated</em> is true, the field <em>biometricToken</em> will contain the biometric token stored in secure storage on the device."},{0:"<code>biometricTokenUpdated</code>",1:"<mark>Bot API 7.2+</mark> Occurs whenever the biometric token was updated.<br><em>eventHandler</em> receives an object with the single field <em>isUpdated</em>, containing a boolean indicating whether the token was updated."}],de={fieldsData:De,eventsData:Ge},z=[];function Qe(t,e=w){let a;const n=new Set;function o(c){if(N(t,c)&&(t=c,a)){const l=!z.length;for(const i of n)i[1](),z.push(i,t);if(l){for(let i=0;i<z.length;i+=2)z[i][0](z[i+1]);z.length=0}}}function s(c){o(c(t))}function r(c,l=w){const i=[c,l];return n.add(i),n.size===1&&(a=e(o)||w),c(t),()=>{n.delete(i),n.size===0&&(a(),a=null)}}return{set:o,update:s,subscribe:r}}const Ie=Qe(window.Telegram.WebApp);function Pe(){Ie.set(window.Telegram.WebApp)}function We(t){let e,a,n;return{c(){e=d("pre"),a=d("code"),n=B(t[0]),I(e,"class","svelte-1yitnnt")},m(o,s){g(o,e,s),p(e,a),p(a,n)},p(o,[s]){s&1&&H(n,o[0])},i:w,o:w,d(o){o&&b(e)}}}function Ue(t,e,a){let{name:n}=e,o=`Events will be displayed here:
`;return Le(()=>{const s=window.Telegram.WebApp.onEvent;typeof s=="function"&&s(n,(...r)=>{a(0,o+=`${JSON.stringify(r)}
`),Pe()})}),t.$$set=s=>{"name"in s&&a(1,n=s.name)},[o,n]}class Ve extends V{constructor(e){super(),U(this,e,Ue,We,N,{name:1})}}function fe(t,e,a){const n=t.slice();return n[1]=e[a],n}function be(t){let e,a,n,o=t[1][0]+"",s,r,c,l,i,h,m,u,f,k=t[1][1]+"",Y,C,j,F,T,K,$;return T=new Ve({props:{name:ge(t[1][0])}}),{c(){e=d("details"),a=d("summary"),n=d("span"),s=v(),r=d("div"),c=d("table"),l=d("colgroup"),l.innerHTML=`<col width="30%"/> 
                    <col width="70%"/>`,i=v(),h=d("tbody"),m=d("tr"),u=d("th"),u.textContent="Description",f=d("td"),Y=v(),C=d("tr"),j=d("th"),j.textContent="Playground",F=d("td"),G(T.$$.fragment),K=v(),I(c,"class","svelte-1y0rnzj"),I(r,"class","content-wrapper svelte-1y0rnzj")},m(A,P){g(A,e,P),p(e,a),p(a,n),n.innerHTML=o,p(e,s),p(e,r),p(r,c),p(c,l),p(c,i),p(c,h),p(h,m),p(m,u),p(m,f),f.innerHTML=k,p(h,Y),p(h,C),p(C,j),p(C,F),E(T,F,null),p(e,K),$=!0},p(A,P){(!$||P&1)&&o!==(o=A[1][0]+"")&&(n.innerHTML=o),(!$||P&1)&&k!==(k=A[1][1]+"")&&(f.innerHTML=k);const S={};P&1&&(S.name=ge(A[1][0])),T.$set(S)},i(A){$||(_(T.$$.fragment,A),$=!0)},o(A){y(T.$$.fragment,A),$=!1},d(A){A&&b(e),L(T)}}}function Ye(t){let e,a,n=t[0],o=[];for(let r=0;r<n.length;r+=1)o[r]=be(fe(t,n,r));const s=r=>y(o[r],1,1,()=>{o[r]=null});return{c(){for(let r=0;r<o.length;r+=1)o[r].c();e=W()},m(r,c){for(let l=0;l<o.length;l+=1)o[l].m(r,c);g(r,e,c),a=!0},p(r,[c]){if(c&1){n=r[0];let l;for(l=0;l<n.length;l+=1){const i=fe(r,n,l);o[l]?(o[l].p(i,c),_(o[l],1)):(o[l]=be(i),o[l].c(),_(o[l],1),o[l].m(e.parentNode,e))}for(Z(),l=n.length;l<o.length;l+=1)s(l);ee()}},i(r){if(!a){for(let c=0;c<n.length;c+=1)_(o[c]);a=!0}},o(r){o=o.filter(Boolean);for(let c=0;c<o.length;c+=1)y(o[c]);a=!1},d(r){oe(o,r),r&&b(e)}}}function ge(t){return t.match(/<code>(.+)<\/code>/)[1]}function Ke(t,e,a){let{data:n}=e;return t.$$set=o=>{"data"in o&&a(0,n=o.data)},[n]}class Je extends V{constructor(e){super(),U(this,e,Ke,Ye,N,{data:0})}}function Xe(t){return t!=null}function Ze(t){return(t+"").replace(/[/][/].*$/gm,"").replace(/\s+/g,"").replace(/[/][*][^/*]*[*][/]/g,"").split("){",1)[0].replace(/^[^(]*[(]/,"").replace(/=[^,]+/g,"").split(",").filter(Boolean)}function we(t,e,a){const n=t.slice();return n[7]=e[a],n[8]=e,n[9]=a,n}function _e(t){let e,a=t[7]+"",n,o,s,r,c,l;function i(){t[6].call(s,t[7])}return{c(){e=d("label"),n=B(a),o=v(),s=d("input"),r=v(),I(s,"type","text"),s.disabled=t[7]===Se,I(e,"class","svelte-b2tya0")},m(h,m){g(h,e,m),p(e,n),p(e,o),p(e,s),me(s,t[1][t[7]]),p(e,r),c||(l=[re(s,"input",t[3](t[7])),re(s,"input",i)],c=!0)},p(h,m){t=h,m&6&&s.value!==t[1][t[7]]&&me(s,t[1][t[7]])},d(h){h&&b(e),c=!1,Q(l)}}}function et(t){let e,a,n,o,s,r,c,l=t[2],i=[];for(let h=0;h<l.length;h+=1)i[h]=_e(we(t,l,h));return{c(){e=d("div"),a=d("button"),n=B(t[0]),o=v(),s=d("div");for(let h=0;h<i.length;h+=1)i[h].c();I(s,"class","input-container svelte-b2tya0"),I(e,"class","container svelte-b2tya0")},m(h,m){g(h,e,m),p(e,a),p(a,n),p(e,o),p(e,s);for(let u=0;u<i.length;u+=1)i[u].m(s,null);r||(c=re(a,"click",t[4]),r=!0)},p(h,[m]){if(m&1&&H(n,h[0]),m&14){l=h[2];let u;for(u=0;u<l.length;u+=1){const f=we(h,l,u);i[u]?i[u].p(f,m):(i[u]=_e(f),i[u].c(),i[u].m(s,null))}for(;u<i.length;u+=1)i[u].d(1);i.length=l.length}},i:w,o:w,d(h){h&&b(e),oe(i,h),r=!1,c()}}}const Se="callback";function tt(t,e,a){let{name:n}=e,{func:o}=e;const s=Ze(o),r=s.reduce((h,m)=>({...h,[m]:""}),{});function c(h){return m=>{a(1,r[h]=m.target.value,r)}}function l(){const h=Object.keys(r).map(m=>m===Se?(...u)=>{a(1,r[m]=JSON.stringify(u),r)}:r[m]);Pe(),o(...h)}function i(h){r[h]=this.value,a(1,r)}return t.$$set=h=>{"name"in h&&a(0,n=h.name),"func"in h&&a(5,o=h.func)},[n,r,s,c,l,o,i]}class Ce extends V{constructor(e){super(),U(this,e,tt,et,N,{name:0,func:5})}}function ve(t,e,a){const n=t.slice();return n[4]=e[a],n}function nt(t){let e,a,n,o;return{c(){e=d("p"),a=B("Value "),n=B(t[0]),o=B(" not found.")},m(s,r){g(s,e,r),p(e,a),p(e,n),p(e,o)},p(s,r){r&1&&H(n,s[0])},i:w,o:w,d(s){s&&b(e)}}}function ot(t){let e,a,n,o;const s=[lt,st,it,rt,at],r=[];function c(l,i){return typeof l[1]=="number"||typeof l[1]=="boolean"?0:typeof l[1]=="string"?1:typeof l[1]=="object"?2:typeof l[1]=="function"?3:4}return e=c(t),a=r[e]=s[e](t),{c(){a.c(),n=W()},m(l,i){r[e].m(l,i),g(l,n,i),o=!0},p(l,i){let h=e;e=c(l),e===h?r[e].p(l,i):(Z(),y(r[h],1,1,()=>{r[h]=null}),ee(),a=r[e],a?a.p(l,i):(a=r[e]=s[e](l),a.c()),_(a,1),a.m(n.parentNode,n))},i(l){o||(_(a),o=!0)},o(l){y(a),o=!1},d(l){r[e].d(l),l&&b(n)}}}function at(t){let e,a,n=typeof t[1],o,s;return{c(){e=d("p"),a=B("Unsupported type "),o=B(n),s=B(".")},m(r,c){g(r,e,c),p(e,a),p(e,o),p(e,s)},p(r,c){c&2&&n!==(n=typeof r[1])&&H(o,n)},i:w,o:w,d(r){r&&b(e)}}}function rt(t){let e,a;return e=new Ce({props:{name:t[0],func:t[1]}}),{c(){G(e.$$.fragment)},m(n,o){E(e,n,o),a=!0},p(n,o){const s={};o&1&&(s.name=n[0]),o&2&&(s.func=n[1]),e.$set(s)},i(n){a||(_(e.$$.fragment,n),a=!0)},o(n){y(e.$$.fragment,n),a=!1},d(n){L(e,n)}}}function it(t){let e,a,n=JSON.stringify(t[1],null,2)+"",o,s,r,c,l=Object.keys(t[1]).filter(t[3]),i=[];for(let m=0;m<l.length;m+=1)i[m]=ye(ve(t,l,m));const h=m=>y(i[m],1,1,()=>{i[m]=null});return{c(){e=d("pre"),a=d("code"),o=B(n),s=v();for(let m=0;m<i.length;m+=1)i[m].c();r=W()},m(m,u){g(m,e,u),p(e,a),p(a,o),g(m,s,u);for(let f=0;f<i.length;f+=1)i[f].m(m,u);g(m,r,u),c=!0},p(m,u){if((!c||u&2)&&n!==(n=JSON.stringify(m[1],null,2)+"")&&H(o,n),u&2){l=Object.keys(m[1]).filter(m[3]);let f;for(f=0;f<l.length;f+=1){const k=ve(m,l,f);i[f]?(i[f].p(k,u),_(i[f],1)):(i[f]=ye(k),i[f].c(),_(i[f],1),i[f].m(r.parentNode,r))}for(Z(),f=l.length;f<i.length;f+=1)h(f);ee()}},i(m){if(!c){for(let u=0;u<l.length;u+=1)_(i[u]);c=!0}},o(m){i=i.filter(Boolean);for(let u=0;u<i.length;u+=1)y(i[u]);c=!1},d(m){m&&b(e),m&&b(s),oe(i,m),m&&b(r)}}}function st(t){let e;function a(s,r){return s[1].length>20?ht:ct}let n=a(t),o=n(t);return{c(){o.c(),e=W()},m(s,r){o.m(s,r),g(s,e,r)},p(s,r){n===(n=a(s))&&o?o.p(s,r):(o.d(1),o=n(s),o&&(o.c(),o.m(e.parentNode,e)))},i:w,o:w,d(s){o.d(s),s&&b(e)}}}function lt(t){let e,a;return{c(){e=d("code"),a=B(t[1])},m(n,o){g(n,e,o),p(e,a)},p(n,o){o&2&&H(a,n[1])},i:w,o:w,d(n){n&&b(e)}}}function ye(t){let e,a;return e=new Ce({props:{name:t[4],func:t[1][t[4]]}}),{c(){G(e.$$.fragment)},m(n,o){E(e,n,o),a=!0},p(n,o){const s={};o&2&&(s.name=n[4]),o&2&&(s.func=n[1][n[4]]),e.$set(s)},i(n){a||(_(e.$$.fragment,n),a=!0)},o(n){y(e.$$.fragment,n),a=!1},d(n){L(e,n)}}}function ct(t){let e,a;return{c(){e=d("code"),a=B(t[1])},m(n,o){g(n,e,o),p(e,a)},p(n,o){o&2&&H(a,n[1])},d(n){n&&b(e)}}}function ht(t){let e,a,n;return{c(){e=d("pre"),a=d("code"),n=B(t[1])},m(o,s){g(o,e,s),p(e,a),p(a,n)},p(o,s){s&2&&H(n,o[1])},d(o){o&&b(e)}}}function mt(t){let e,a,n,o,s;const r=[ot,nt],c=[];function l(i,h){return h&3&&(e=null),e==null&&(e=!!(i[0]&&Xe(i[1]))),e?0:1}return a=l(t,-1),n=c[a]=r[a](t),{c(){n.c(),o=W()},m(i,h){c[a].m(i,h),g(i,o,h),s=!0},p(i,[h]){let m=a;a=l(i,h),a===m?c[a].p(i,h):(Z(),y(c[m],1,1,()=>{c[m]=null}),ee(),n=c[a],n?n.p(i,h):(n=c[a]=r[a](i),n.c()),_(n,1),n.m(o.parentNode,o))},i(i){s||(_(n),s=!0)},o(i){y(n),s=!1},d(i){c[a].d(i),i&&b(o)}}}function pt(t,e,a){let n,o;je(t,Ie,c=>a(2,o=c));let{name:s}=e;const r=c=>typeof n[c]=="function";return t.$$set=c=>{"name"in c&&a(0,s=c.name)},t.$$.update=()=>{t.$$.dirty&5&&a(1,n=o[s])},[s,n,o,r]}class ut extends V{constructor(e){super(),U(this,e,pt,mt,N,{name:0})}}function ke(t,e,a){const n=t.slice();return n[1]=e[a],n}function Ae(t){let e,a,n,o=t[1][0]+"",s,r,c,l,i,h,m,u,f,k=t[1][1]+"",Y,C,j,F,T=t[1][2]+"",K,$,A,P,S,le,R;return S=new ut({props:{name:Be(t[1][0])}}),{c(){e=d("details"),a=d("summary"),n=d("span"),s=v(),r=d("div"),c=d("table"),l=d("colgroup"),l.innerHTML=`<col width="30%"/> 
                    <col width="70%"/>`,i=v(),h=d("tbody"),m=d("tr"),u=d("th"),u.textContent="Type",f=d("td"),Y=v(),C=d("tr"),j=d("th"),j.textContent="Description",F=d("td"),K=v(),$=d("tr"),A=d("th"),A.textContent="Playground",P=d("td"),G(S.$$.fragment),le=v(),Oe(P,"width","30%"),I(c,"class","svelte-1y0rnzj"),I(r,"class","content-wrapper svelte-1y0rnzj")},m(M,q){g(M,e,q),p(e,a),p(a,n),n.innerHTML=o,p(e,s),p(e,r),p(r,c),p(c,l),p(c,i),p(c,h),p(h,m),p(m,u),p(m,f),f.innerHTML=k,p(h,Y),p(h,C),p(C,j),p(C,F),F.innerHTML=T,p(h,K),p(h,$),p($,A),p($,P),E(S,P,null),p(e,le),R=!0},p(M,q){(!R||q&1)&&o!==(o=M[1][0]+"")&&(n.innerHTML=o),(!R||q&1)&&k!==(k=M[1][1]+"")&&(f.innerHTML=k),(!R||q&1)&&T!==(T=M[1][2]+"")&&(F.innerHTML=T);const ce={};q&1&&(ce.name=Be(M[1][0])),S.$set(ce)},i(M){R||(_(S.$$.fragment,M),R=!0)},o(M){y(S.$$.fragment,M),R=!1},d(M){M&&b(e),L(S)}}}function dt(t){let e,a,n=t[0],o=[];for(let r=0;r<n.length;r+=1)o[r]=Ae(ke(t,n,r));const s=r=>y(o[r],1,1,()=>{o[r]=null});return{c(){for(let r=0;r<o.length;r+=1)o[r].c();e=W()},m(r,c){for(let l=0;l<o.length;l+=1)o[l].m(r,c);g(r,e,c),a=!0},p(r,[c]){if(c&1){n=r[0];let l;for(l=0;l<n.length;l+=1){const i=ke(r,n,l);o[l]?(o[l].p(i,c),_(o[l],1)):(o[l]=Ae(i),o[l].c(),_(o[l],1),o[l].m(e.parentNode,e))}for(Z(),l=n.length;l<o.length;l+=1)s(l);ee()}},i(r){if(!a){for(let c=0;c<n.length;c+=1)_(o[c]);a=!0}},o(r){o=o.filter(Boolean);for(let c=0;c<o.length;c+=1)y(o[c]);a=!1},d(r){oe(o,r),r&&b(e)}}}function Be(t){return t=t.split("<")[0],t=t.split("(")[0],t=t.trim(),t}function ft(t,e,a){let{data:n}=e;return t.$$set=o=>{"data"in o&&a(0,n=o.data)},[n]}class bt extends V{constructor(e){super(),U(this,e,ft,dt,N,{data:0})}}function gt(t){let e,a,n,o,s,r,c,l;return n=new bt({props:{data:de.fieldsData}}),c=new Je({props:{data:de.eventsData}}),{c(){e=d("h3"),e.textContent="Available fields for Web Apps",a=v(),G(n.$$.fragment),o=v(),s=d("h3"),s.textContent="Events Available for Web Apps",r=v(),G(c.$$.fragment),I(e,"class","svelte-1yquk9n"),I(s,"class","svelte-1yquk9n")},m(i,h){g(i,e,h),g(i,a,h),E(n,i,h),g(i,o,h),g(i,s,h),g(i,r,h),E(c,i,h),l=!0},p:w,i(i){l||(_(n.$$.fragment,i),_(c.$$.fragment,i),l=!0)},o(i){y(n.$$.fragment,i),y(c.$$.fragment,i),l=!1},d(i){i&&b(e),i&&b(a),L(n,i),i&&b(o),i&&b(s),i&&b(r),L(c,i)}}}class wt extends V{constructor(e){super(),U(this,e,null,gt,N,{})}}new wt({target:document.getElementById("app")});
